require 'helper'

class NetflowParserTest < Test::Unit::TestCase
  def setup
    Fluent::Test.setup
  end

  def create_parser(conf=nil)
    parser = Fluent::TextParser::NetflowParser.new
    parser.configure(conf || Fluent::Config::Element.new('ROOT', '', {}, []))
    parser
  end

  def test_configure
    assert_nothing_raised do
      parser = create_parser
    end
  end

  def test_parse_v5_dumped
    # generated by https://github.com/mshindo/NetFlow-Generator
    parser = create_parser
    raw_data = File.open(File.expand_path('../netflow.v5.dump', __FILE__)){|f| f.read }
    bytes_for_1record = Fluent::TextParser::NetflowParser::NETFLOW_V5_HEADER_BYTES + Fluent::TextParser::NetflowParser::NETFLOW_V5_RECORD_BYTES
    assert_equal bytes_for_1record, raw_data.size
    parsed = []
    parser.call(raw_data) do |time, data|
      parsed << [time, data]
    end
    assert_equal 1, parsed.size
    assert_equal Time.parse('2016-02-29 11:14:00 -0800').to_i, parsed.first[0]
    expected_record = {
      "src_addr" => "10.0.0.11",
      "dst_addr" => "20.0.0.187",
      "next_hop" => "30.0.0.254",
      "input_snmp"  => 1,
      "output_snmp" => 2,
      "in_pkts"  => 173,
      "in_bytes" => 4581,
      "first_switched" => 1785096125,
      "last_switched"  => 1785097000,
      "l4_src_port" => 1001,
      "l4_dst_port" => 3001,
      "tcp_flag" => 27,
      "protocol" => 6,
      "src_tos"  => 0,
      "src_as"   => 101,
      "dst_as"   => 201,
      "src_mask" => 24,
      "dst_mask" => 24,
    }
    assert_equal expected_record, parsed.first[1]
  end
end
